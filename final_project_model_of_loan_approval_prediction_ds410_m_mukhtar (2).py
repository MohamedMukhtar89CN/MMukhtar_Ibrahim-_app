# -*- coding: utf-8 -*-
"""FINAL Project Model of Loan Approval Prediction DS410 M. Mukhtar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/112mNer2xcZVhjMoC8Pzj9Xcprr_I5HXB
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
import plotly.express as px
import plotly.graph_objects as go

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/Loan approval prediction (1).csv')

df = pd.read_csv('/content/Loan approval prediction (1).csv')
print(df.iloc[0])

df.info()

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()

correlation_matrix = numeric_df.corr()
print(correlation_matrix)

df = pd.read_csv('/content/Loan approval prediction (1).csv')
categorical_columns = ['person_home_ownership',
       'loan_intent', 'loan_grade', 'cb_person_default_on_file']
label_encoder = LabelEncoder()
for column in categorical_columns:
    df['cb_person_cred_hist_length'] = label_encoder.fit_transform(df['cb_person_cred_hist_length'])
    df['person_home_ownership'] = label_encoder.fit_transform(df['person_home_ownership'])
    df['loan_intent'] = label_encoder.fit_transform(df['loan_intent'])
    df['loan_grade'] = label_encoder.fit_transform(df['loan_grade'])
    df['cb_person_default_on_file'] = label_encoder.fit_transform(df['cb_person_default_on_file'])

# Inspect the first few rows
print(df.head())

# Check for missing values
print(df.isnull().sum())

df.drop('id', axis=1, inplace=True)

df.fillna(df.mean(), inplace=True)

df.columns

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(8,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
# Display the heatmap
plt.title("Correlation Heatmap")
plt.show()

"""## Encoding of categorical columns"""

categorical_columns = ['person_home_ownership',
       'loan_intent', 'loan_grade', 'cb_person_default_on_file']
label_encoder = LabelEncoder()
for column in categorical_columns:
    df['cb_person_cred_hist_length'] = label_encoder.fit_transform(df['cb_person_cred_hist_length'])
    df['person_home_ownership'] = label_encoder.fit_transform(df['person_home_ownership'])
    df['loan_intent'] = label_encoder.fit_transform(df['loan_intent'])
    df['loan_grade'] = label_encoder.fit_transform(df['loan_grade'])
    df['cb_person_default_on_file'] = label_encoder.fit_transform(df['cb_person_default_on_file'])

df.dtypes

# Scale numerical features for better clustering
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[['person_home_ownership',
       'loan_intent', 'loan_grade', 'cb_person_default_on_file']])

df_scaled = pd.DataFrame(scaled_features, columns=['person_home_ownership',
       'loan_intent', 'loan_grade', 'cb_person_default_on_file'])

df.head(15)

df.info

df.describe()

# Data Distribution
numerical_features = ['person_age', 'person_income', 'person_home_ownership',
       'person_emp_length', 'loan_intent', 'loan_grade', 'loan_amnt',
       'loan_int_rate', 'loan_percent_income', 'cb_person_default_on_file',
       'cb_person_cred_hist_length', 'loan_status']


plt.figure(figsize=(12, 8))
for feature in numerical_features:
    plt.subplot(3, 5, numerical_features.index(feature) + 1)
    sns.histplot(data=df[feature], bins=20, kde=True)
    plt.title(feature)
plt.tight_layout()
plt.show()

"""# Manage outliers"""

df.describe()

categorical_columns = ['person_home_ownership',
       'loan_intent', 'loan_grade', 'cb_person_default_on_file']
label_encoder = LabelEncoder()
for column in categorical_columns:
    df['cb_person_cred_hist_length'] = label_encoder.fit_transform(df['cb_person_cred_hist_length'])
    df['person_home_ownership'] = label_encoder.fit_transform(df['person_home_ownership'])
    df['loan_intent'] = label_encoder.fit_transform(df['loan_intent'])
    df['loan_grade'] = label_encoder.fit_transform(df['loan_grade'])
    df['cb_person_default_on_file'] = label_encoder.fit_transform(df['cb_person_default_on_file'])

    # Smooth outliers using a rolling median
df["person_age"] = df["person_age"].rolling(window=5, center=True).median()
df["person_emp_length"] = df["person_emp_length"].rolling(window=5, center=True).median()
df["loan_percent_income"] = df["loan_percent_income"].rolling(window=5, center=True).median()
df["cb_person_cred_hist_length"] = df["cb_person_cred_hist_length"].rolling(window=5, center=True).median()
df["loan_int_rate"] = df["loan_int_rate"].rolling(window=5, center=True).median()

df.fillna(df.mean(), inplace=True)

# Save the smoothed dataset
df.to_csv("Smoothed_data.csv", index=False)
print("Outliers have been smoothed and saved as 'Smoothed_data.csv'.")

# Data Distribution
numerical_features = ['person_age', 'person_income', 'person_home_ownership',
       'person_emp_length', 'loan_intent', 'loan_grade', 'loan_amnt',
       'loan_int_rate', 'loan_percent_income', 'cb_person_default_on_file',
       'cb_person_cred_hist_length', 'loan_status']


plt.figure(figsize=(12, 8))
for feature in numerical_features:
    plt.subplot(3, 5, numerical_features.index(feature) + 1)
    sns.histplot(data=df[feature], bins=20, kde=True)
    plt.title(feature)
plt.tight_layout()
plt.show()

df = pd.read_csv('/content/Smoothed_data.csv')


df.head(3)

numeric_df = df.select_dtypes(include=np.number)
correlation_matrix = numeric_df.corr()
plt.figure(figsize=(8,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Display the heatmap
plt.title("Correlation Heatmap")
plt.show()

"""# Model creation"""

df.columns

df.dtypes

# Split data
# smoothed_data.csv
from sklearn.model_selection import train_test_split

X = df.drop(columns=['loan_status'])
# Features
y = df['loan_status']
# Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
import numpy as np
X_train = np.array(X_train)
y_train = np.array(y_train)
# Load dataset
file_path = "Loan approval prediction (1).csv"
# Update with the correct file path
df = pd.read_csv("/content/Smoothed_data.csv")
# Create and train SVM model
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale')
# Try 'linear' or 'poly' kernels for experimentation
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)

df = pd.read_csv('/content/Smoothed_data.csv')
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
file_path = "Loan approval prediction (1).csv"
# Update with the correct file path
df = pd.read_csv("/content/Smoothed_data.csv")




# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Create and train SVM model
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale')

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(X_train, y_train)

"""Accuracy of classifier & model"""

from sklearn.metrics import accuracy_score

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

from sklearn.metrics import classification_report

print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.metrics import roc_auc_score

auc = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])  # If model supports probabilities
print("ROC-AUC Score:", auc)

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(model, X_train, y_train, cv=5)
print("Cross-validation Scores:", cv_scores)
print("Mean CV Score:", cv_scores.mean())

# Model is already trained
y_pred = model.predict(X_test)
# Predict for test set
print("Predictions:\n", y_pred)

import numpy as np
df = pd.read_csv("Smoothed_data.csv")
new_data = np.array([[45000, 35, 1, 0, 750, 1, 1, 25000, 3, 0, 1, 5]])

prediction = model.predict([[35, 1, 0, 750, 1, 1, 15000, 3, 0, 1, 5]])

print("Loan Approval Prediction:", prediction)

import numpy as np
df = pd.read_csv("/content/Smoothed_data.csv")
new_data = np.array([[45000, 35, 1, 0, 750, 1, 1, 25000, 3, 0, 1, 5]])

prediction = model.predict([[22, 30000, 1, 3, 2, 2, 2, 50000, 16, 0.2, 5]])

loan_status = "Rejected" if prediction[0] == 0 else "Approved"

print(f"Loan Approval Status: {loan_status}")

prediction = model.predict([[25, 40000, 1, 18, 1, 1, 5000, 9, 20, 1, 3]])



loan_status = "Rejected" if prediction[0] == 0 else "Approved"

print(f"Loan Approval Status: {loan_status}")

# Assume your model has already made a binary prediction
prediction = model.predict([[25, 40000, 1, 18, 1, 1, 5000, 9, 20, 1, 3]])  # Returns 0 or 1

# Convert the integer result into a string label
loan_status = "Rejected" if prediction[0] == 0 else "Approved"

print(f"Loan Approval Status: {loan_status}")

import joblib

# Save models
joblib.dump(model, "loan_model.pkl")

# Save scalers
joblib.dump(scaler, "scaler.pkl")

# Save label encoders
joblib.dump(encoder, "label_encoder.pkl")

print(" Models, scalers, and encoders saved successfully!")

pip freeze > requirements.txt